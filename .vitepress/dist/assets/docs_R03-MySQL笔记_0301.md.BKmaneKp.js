import{_ as a,c as s,o as i,ag as e}from"./framework-BN9qVwRq.js";const g=JSON.parse('{"title":"性能指标测试","description":"","frontmatter":{},"headers":[],"relativePath":"docs/R03-MySQL笔记/0301.md","filePath":"docs/R03-MySQL笔记/0301.md"}'),r={name:"docs/R03-MySQL笔记/0301.md"};function l(d,t,n,h,o,p){return i(),s("div",null,t[0]||(t[0]=[e(`<h1 id="性能指标测试" tabindex="-1">性能指标测试 <a class="header-anchor" href="#性能指标测试" aria-label="Permalink to &quot;性能指标测试&quot;">​</a></h1><p>在构建高并发、高可用的系统时，数据库性能指标是不可忽视的关键环节。尤其是像 MySQL 这样的传统关系型数据库，在面对大量并发请求时，如何确保数据的高效存取，避免因性能瓶颈导致系统崩溃或响应延迟，是开发者需要重点考虑的问题。</p><h2 id="最大连接数" tabindex="-1">最大连接数 <a class="header-anchor" href="#最大连接数" aria-label="Permalink to &quot;最大连接数&quot;">​</a></h2><p>MySQL 的默认最大连接数配置用于控制数据库允许的最大客户端连接数。在不同版本的 MySQL 和 MariaDB 以及不同的运行环境中，默认的连接数有所不同。合理配置最大连接数能够避免因连接过多而导致的内存不足和系统性能问题。下面是不同版本下的MySQL默认最大连接数:</p><table tabindex="0"><thead><tr><th>MySQL 版本/环境</th><th>默认值</th><th>影响因素</th></tr></thead><tbody><tr><td>MySQL 5.7（社区版）</td><td>151</td><td>基于安全保守配置，避免内存耗尽</td></tr><tr><td>MySQL 8.0（社区版）</td><td>151</td><td>同上</td></tr><tr><td>MariaDB 10.x</td><td>151</td><td>与 MySQL 5.7 保持一致</td></tr><tr><td>云数据库（如 RDS）</td><td>2000~4000</td><td>云厂商优化，根据实例规格动态调整</td></tr><tr><td>Docker 容器（小内存）</td><td>100~200</td><td>容器内存限制导致更低默认值</td></tr></tbody></table><h3 id="连接数选定" tabindex="-1">连接数选定 <a class="header-anchor" href="#连接数选定" aria-label="Permalink to &quot;连接数选定&quot;">​</a></h3><p><strong>连接数选定的计算方法</strong><br> 为了合理配置最大连接数，需要了解每个连接所占用的内存空间，并根据服务器的可用内存和 InnoDB 缓冲池大小进行调整。连接数的计算公式如下：</p><ul><li>每个连接占用内存 ≈ 4MB + sort_buffer_size + join_buffer_size</li><li>最大连接数 ≤ (可用内存 - InnoDB 缓冲池) / 每个连接内存</li></ul><p>具体来说，sort_buffer_size 和 join_buffer_size 会根据你的查询操作和数据表大小来变化，连接数的调整也需结合这些配置来进行优化。</p><p><strong>查看当前配置值</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SHOW VARIABLES LIKE &#39;sort_buffer_size&#39;;  -- 默认通常 256KB~2MB</span></span>
<span class="line"><span>SHOW VARIABLES LIKE &#39;join_buffer_size&#39;;  -- 默认通常 256KB~1MB</span></span>
<span class="line"><span>SHOW VARIABLES LIKE &#39;innodb_buffer_pool_size&#39;;  -- 默认通常为 128MB~8GB</span></span></code></pre></div><h3 id="优化建议" tabindex="-1">优化建议 <a class="header-anchor" href="#优化建议" aria-label="Permalink to &quot;优化建议&quot;">​</a></h3><ul><li><p>基于内存限制调整连接数：<br> 在内存较小的服务器中，应当限制最大连接数，避免因过多连接导致内存不足和系统崩溃。在大内存服务器中，可以适当增加最大连接数，但也要留有一定的内存余量给 InnoDB 缓冲池等其他操作。</p></li><li><p>动态调整连接数： 在生产环境中，尤其是在高并发的场景下，最大连接数的设置应根据负载的实际情况动态调整。可以结合监控工具（如 Prometheus、Grafana）监控系统负载，并实时调整。</p></li><li><p>合理设置应用的最大连接数： 如果系统包含多个业务数据库，建议为每个数据库设置合理的最大连接数。通过合理规划应用与数据库之间的连接池大小，可以避免因过多的数据库连接而导致性能下降或资源浪费。</p></li><li><p>考虑超时设置： 在连接数限制较高的情况下，还需合理设置连接的超时时间（如 wait_timeout 和 interactive_timeout），避免长时间占用的连接占用系统资源。建议设置合理的超时值，确保连接池中的连接能够有效释放。</p></li></ul><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li><p>默认最大连接数设置是一个保守配置，适用于大多数场景，但在特定环境下可能需要根据实际业务需求进行调整。</p></li><li><p>在云数据库（如 RDS）等环境中，厂商会根据实例规格和业务负载动态调整连接数，因此用户不需要过多干预。</p></li><li><p>在容器化环境（如 Docker）中，由于内存资源限制，可能需要将最大连接数设置为较低的值，以避免容器内存溢出。</p></li></ul><h3 id="思考" tabindex="-1">思考 <a class="header-anchor" href="#思考" aria-label="Permalink to &quot;思考&quot;">​</a></h3><h4 id="mysql为什么默认值是151" tabindex="-1">mysql为什么默认值是151? <a class="header-anchor" href="#mysql为什么默认值是151" aria-label="Permalink to &quot;mysql为什么默认值是151?&quot;">​</a></h4><p><strong>历史原因</strong>：早期 MySQL 为了避免低配置的服务器因为连接数过多导致内存溢出（OOM），所以将默认连接数设置得比较保守（151）。这个配置旨在平衡服务器的内存使用和系统稳定性。<br><strong>现代化的优化</strong>：随着硬件性能的提升，尤其是在云环境和大内存服务器上，MySQL 在一些环境（如云数据库和高配置的物理服务器）会自动优化连接数，以适应更高并发的业务需求。</p><h2 id="crud基础操作耗时统计" tabindex="-1">CRUD基础操作耗时统计 <a class="header-anchor" href="#crud基础操作耗时统计" aria-label="Permalink to &quot;CRUD基础操作耗时统计&quot;">​</a></h2><p>为了准确评估 MySQL 数据库在不同操作下的性能，我们使用了以下测试环境：</p><table tabindex="0"><thead><tr><th><strong>项</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>硬件</strong></td><td>4核8G 服务器，SSD 磁盘</td></tr><tr><td><strong>数据量</strong></td><td>单表 100 万行数据</td></tr><tr><td><strong>网络</strong></td><td>内网（延迟 &lt;1ms）</td></tr><tr><td><strong>索引类型</strong></td><td>B+Tree（主键索引、二级索引）</td></tr><tr><td><strong>事务隔离级别</strong></td><td>READ COMMITTED</td></tr><tr><td><strong>网络环境</strong></td><td>内网环境（网络延迟 &lt;1ms）</td></tr></tbody></table><h3 id="耗时对比-单位-ms" tabindex="-1">耗时对比(单位：ms) <a class="header-anchor" href="#耗时对比-单位-ms" aria-label="Permalink to &quot;耗时对比(单位：ms)&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>操作类型</strong></th><th><strong>无索引</strong></th><th><strong>有索引（主键/二级）</strong></th><th><strong>关键影响因素</strong></th></tr></thead><tbody><tr><td><strong>Insert</strong></td><td>1~3 ms</td><td>1~3 ms</td><td>事务提交频率、缓冲池状态</td></tr><tr><td><strong>Select</strong></td><td>10~1000+ ms</td><td>0.1~5 ms</td><td>全表扫描 vs 索引扫描</td></tr><tr><td><strong>Update</strong></td><td>10~500 ms</td><td>1~10 ms</td><td>索引更新、行锁竞争</td></tr><tr><td><strong>Delete</strong></td><td>10~500 ms</td><td>1~10 ms</td><td>索引更新、表碎片化</td></tr></tbody></table><hr><h3 id="场景分析" tabindex="-1">场景分析 <a class="header-anchor" href="#场景分析" aria-label="Permalink to &quot;场景分析&quot;">​</a></h3><h4 id="插入数据" tabindex="-1">插入数据 <a class="header-anchor" href="#插入数据" aria-label="Permalink to &quot;插入数据&quot;">​</a></h4><ul><li><strong>无索引 vs 有索引</strong>：耗时基本一致（B+Tree 索引插入成本低）。</li><li><strong>瓶颈</strong>： <ul><li>事务提交方式（<code>innodb_flush_log_at_trx_commit=1</code> 最安全但最慢）。</li><li>批量插入时建议使用 <code>INSERT ... VALUES (...), (...)</code> 减少网络往返。</li></ul></li></ul><h4 id="查询数据" tabindex="-1">查询数据 <a class="header-anchor" href="#查询数据" aria-label="Permalink to &quot;查询数据&quot;">​</a></h4><table tabindex="0"><thead><tr><th><strong>查询场景</strong></th><th><strong>无索引耗时</strong></th><th><strong>有索引耗时</strong></th><th><strong>原因</strong></th></tr></thead><tbody><tr><td>主键查询（WHERE id=1）</td><td>0.5~2 ms</td><td>0.1~1 ms</td><td>主键索引直接定位</td></tr><tr><td>二级索引查询（WHERE name=&#39;xx&#39;）</td><td>10~1000 ms</td><td>0.5~3 ms</td><td>无索引需全表扫描</td></tr><tr><td>范围查询（WHERE age&gt;20）</td><td>100~5000 ms</td><td>1~10 ms</td><td>索引范围扫描 vs 全表扫描</td></tr></tbody></table><h4 id="更新数据" tabindex="-1">更新数据 <a class="header-anchor" href="#更新数据" aria-label="Permalink to &quot;更新数据&quot;">​</a></h4><ul><li><strong>无索引</strong>： <ul><li>需先全表扫描定位数据（耗时与 <code>Select</code> 相同），再更新（+1~2 ms）。</li><li><strong>示例</strong>：<code>UPDATE users SET status=1 WHERE phone=&#39;13800138000&#39;</code>（无索引）→ 100~500 ms。</li></ul></li><li><strong>有索引</strong>： <ul><li>通过索引快速定位（0.1~2 ms），更新数据+索引（+1~3 ms）。</li><li><strong>瓶颈</strong>：行锁竞争（高并发时可能阻塞）。</li></ul></li></ul><h4 id="删除数据" tabindex="-1">删除数据 <a class="header-anchor" href="#删除数据" aria-label="Permalink to &quot;删除数据&quot;">​</a></h4><ul><li><strong>无索引</strong>:全表扫描定位（同 <code>Select</code>），删除后可能产生表碎片。</li><li><strong>有索引</strong>:快速定位，但需同步更新索引（InnoDB 实际是标记删除，不影响瞬时性能）。</li></ul><hr><h3 id="性能优化建议" tabindex="-1">性能优化建议 <a class="header-anchor" href="#性能优化建议" aria-label="Permalink to &quot;性能优化建议&quot;">​</a></h3><h4 id="索引策略" tabindex="-1">索引策略 <a class="header-anchor" href="#索引策略" aria-label="Permalink to &quot;索引策略&quot;">​</a></h4><ul><li>主键索引：尽量使用自增 <code>BIGINT</code>，避免随机主键（如UUID）导致页分裂。</li><li>高频查询字段：添加二级索引（如 <code>INDEX(name)</code>）。</li><li>避免过度索引：每个索引会增加 <code>Insert/Update/Delete</code> 的维护成本。</li></ul><h4 id="写入优化" tabindex="-1">写入优化 <a class="header-anchor" href="#写入优化" aria-label="Permalink to &quot;写入优化&quot;">​</a></h4><ul><li>批量插入：用 <code>INSERT ... VALUES (...), (...)</code> 替代多次单条插入。</li><li>调整事务提交：批量操作时设置 <code>innodb_flush_log_at_trx_commit=0</code>（需权衡安全性）。</li></ul><h4 id="查询优化" tabindex="-1">查询优化 <a class="header-anchor" href="#查询优化" aria-label="Permalink to &quot;查询优化&quot;">​</a></h4><ul><li>覆盖索引：<code>SELECT</code> 的字段尽量在索引中，避免回表。<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 优化前（需回表）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 优化后（覆盖索引）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ADD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> idx_age_name(age, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 直接走索引</span></span></code></pre></div></li></ul><h4 id="连接池配置" tabindex="-1">连接池配置 <a class="header-anchor" href="#连接池配置" aria-label="Permalink to &quot;连接池配置&quot;">​</a></h4><ul><li>应用层连接池（如 Druid）设置合理的 <code>max_wait</code>，避免线程阻塞。</li></ul>`,43)]))}const c=a(r,[["render",l]]);export{g as __pageData,c as default};
